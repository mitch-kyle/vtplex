;;; vtplex-spaceline.el --- spaceline segment for vtplex -*- lexical-binding: t -*-

;; Author: Mitch Kyle <mitch.tux@gmail.com>
;; Maintainer: Mitch Kyle <mitch.tux@gmail.com>
;; Version: 0.1.0-alpha
;; Package-Requires: ((spaceline "2.0.1") (vtplex))
;; Homepage: https://github.com/mitch-kyle/vtplex
;; Keywords: vtplex spaceline

;; This file is not part of GNU Emacs

;; This file is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 3, or (at your option)
;; any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; For a full copy of the GNU General Public License
;; see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; tmux powerline like mode line for for vtplex.

;;; Code:
(require 'vtplex)
(require 'spaceline)

;;;;;;;;;;;;
;; Custom ;;
;;;;;;;;;;;;

(defgroup vtplex-spaceline nil
  "vtplex spaceline segment"
  :group 'spaceline)

(defcustom vtplex-spaceline-max-title-length 30
  "The maximum number of characters allowed in the vtplex status line for a
buffer"
  :type 'integer
  :group 'vtplex-spaceline)

(defcustom vtplex-spaceline-title-overflow-suffix "..."
  "String to appended to title in the vtplex buffer indicator to show that it
has been truncated for being too long."
  :type 'integer
  :group 'vtplex-spaceline)


;;;;;;;;;;;;;;;
;; Variables ;;
;;;;;;;;;;;;;;;

(defvar vtplex-spaceline-n-buffer-indicators 9
  "Number of buffer indicators to have on the status line. this number should
be positive and odd.")

(defvar vtplex-spaceline-prune-title
  (format "%s@%s: "
          (getenv "USER")
          (s-trim (shell-command-to-string "hostname")))
  "prefix to remove from terminal title in vtplex buffer indicator.")


;;;;;;;;;;;;;;;;;;;;;;;;
;; Spaceline Segments ;;
;;;;;;;;;;;;;;;;;;;;;;;;

;; This function is only called in one place but if it's kept as a named
;; function it can be hacked to display what the user likes for the buffer
;; indicator
(defun vtplex-spaceline--indicator-text (index buffer)
  "Get the text for the indicator for a specific index and vtplex buffer."
  (when-let (name (with-current-buffer buffer
                    (when vtplex-title
                      (string-remove-prefix vtplex-spaceline-prune-title
                                            (s-trim vtplex-title)))))
    (format "%d %s" index
            (if (<= (length name)
                    vtplex-spaceline-max-title-length)
                name
              (concat
               (substring name 0
                          (- vtplex-spaceline-max-title-length
                             (length
                              vtplex-spaceline-title-overflow-suffix)))
               vtplex-spaceline-title-overflow-suffix)))))

(defun vtplex-spaceline-buffer-indicator (n
                                          base-priority
                                          priority-increment
                                          &rest props)
  "Generate a list of spaceline segments which will show the current
vtplex buffer along with it's surrounding buffers with descending priority.

when used with a window system, indicators are clickable and will switch to
the buffer they represent."
  (let ((result)
        (mid-point (/ n 2)))
    (dotimes (i n)
      (let* ((sym      (intern (format "vtplex-status-line%s" i)))
             (position (- (- mid-point i)))
             (priority (- base-priority
                          (* (abs position)
                             priority-increment))))
        (eval
         `(spaceline-define-segment ,sym
            "generated by `vtplex-spaceline'."
            (let* ((cur-index (vtplex--current-index))
                   (my-index  (+ cur-index ,position))
                   (buf       (and (>= my-index 0)
                                   (nth my-index vtplex-buffer-list))))
              (when-let (name (and buf
                                   (vtplex-spaceline--indicator-text my-index
                                                                     buf)))
                (propertize name
                            ;; Highlight active buffer
                            ,@(when (zerop position)
                                '('face 'mode-line-buffer-id))
                            'mouse-face 'mode-line-highlight
                            'help-echo "mouse-1: Switch to buffer"
                            'local-map (let ((map (make-sparse-keymap)))
                                         (define-key map
                                           [mode-line mouse-1]
                                           `(lambda ()
                                              (interactive)
                                              (switch-to-buffer ,buf)))
                                         map)))))
         t)
        (setq result (cons `(,sym :priority ,priority ,@props)
                           result))))
    (reverse result)))

(spaceline-define-segment vtplex-copy-mode
  "Indicator for vterm-copy-mode"
  (when vterm-copy-mode "copy"))

;;;;;;;;;;;;;;;;;;;;
;; Hook Functions ;;
;;;;;;;;;;;;;;;;;;;;

(defun vtplex-spaceline--set (&rest _)
  "Hook function to manage mode-line for vtplex buffers"
  (if (and vtplex-mode (functionp 'spaceline-ml-vtplex))
      (setq mode-line-format '("%e" (:eval (spaceline-ml-vtplex))))
    (kill-local-variable 'mode-line-format)))

;;;;;;;;;;;;;;;;;;;;;;
;; Public Functions ;;
;;;;;;;;;;;;;;;;;;;;;;

;;;###autoload
(defun vtplex-spaceline-compile (&rest additional-segments)
  "Compile the vtplex spaceline."
  (spaceline-compile
    'vtplex
    `(((((persp-name :fallback workspace-number) window-number)
        :separator "•")
       :face highlight-face
       :priority 100)
      (anzu :priority 95)
      (process :when active)
      ((flycheck-error flycheck-warning flycheck-info)
       :when active
       :priority 89)
      ,@(vtplex-spaceline-buffer-indicator
         vtplex-spaceline-n-buffer-indicators
         100 4))
    `((vtplex-copy-mode :priority 100
                        :face highlight-face)
      (version-control :when active
                       :priority 78)
      which-function
      (python-pyvenv :fallback python-pyenv)
      (purpose :priority 94)
      (battery :when active)
      (selection-info :priority 95)
      input-method
      ((point-position line-column)
       :separator " • "
       :when vterm-copy-mode
       :priority 96)
      (global :when active)
      ,@additional-segments
      (buffer-position :when vterm-copy-mode
                       :priority 99)
      (hud :priority 99))))

;;;###autoload
(defun vtplex-spaceline-enable (&rest additional-segments)
  "Enable vtplex spaceline for vtplex-mode and set it for all current vtplex
buffers."
  (apply 'vtplex-spaceline-compile additional-segments)
  (add-hook 'vtplex-mode-hook #'vtplex-spaceline--set)
  (dolist (buf (buffer-list))
    (with-current-buffer buf
      (when vtplex-mode
        (vtplex-spaceline--set)))))

(defun vtplex-spaceline-disable ()
  "Disable vtplex spaceline and unset it from all current vtplex buffers."
  (remove-hook 'vtplex-mode-hook #'vtplex-spaceline--set)
  (dolist (buf (buffer-list))
    (with-current-buffer buf
      (when vtplex-mode
        (kill-local-variable 'mode-line-format)))))

(provide 'vtplex-spaceline)

;;; vtplex-spaceline.el ends here
